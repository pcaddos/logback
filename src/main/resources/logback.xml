<configuration>

    <!-- 自定义颜色（文件底部有对应自定义颜色处理类的代码） -->
    <conversionRule conversionWord="custom" converterClass="com.example.demo.CustomLogColor"/>

    <!-- 定义日志路径 -->
    <property name="LOG_PATH" value="/Users/pcaddos/Desktop/log/"/>

    <!-- 控制台输出 -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!-- 这里有输出请求进来带有的requestId，在日常开发中，多个系统互相调用
             单次调用带上一个唯一的requestId，便于排查错误的时候日志跟踪-->
            <pattern>%blue([requestId:%X{requestId:-requestId}]) %d{yyyy-MM-dd HH:mm:ss.SSS} %red([%thread])
                %custom(%5level) - %msg%n
            </pattern>
        </encoder>
    </appender>

    <appender name="INFO_LOG_FIX" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}logback-test-info.log</file>
        <encoder>
            <pattern>%blue([requestId:%X{requestId:-requestId}]) %d{yyyy-MM-dd HH:mm:ss.SSS} %red([%thread]) %custom(%5level) - %msg%n</pattern>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            <fileNamePattern>${LOG_PATH}logback-test-info-%i.log</fileNamePattern>
            <minIndex>1</minIndex>
            <maxIndex>10</maxIndex>
        </rollingPolicy>
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <maxFileSize>1MB</maxFileSize>
        </triggeringPolicy>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <root level="info">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="INFO_LOG_FIX"/>
    </root>
</configuration>
